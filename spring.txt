서버단 작성
 1) spring framework : 웹 개발할 때 주로 사용 / 설정 작업  필요 
 2) spring boot : spring framework 간편화 버전

프로젝트 생성 
1. 빌드 툴 설정 
build: 프로젝트 생성, 라이브러리 설정, 코드작업, 컴파일, 테스트, 패키지 작성, 배포
 1) gradle : 일반 text기반, 후발 주자(maven개선)
 2) maven : xml기반(태그긴하지만 만들어서 쓰는거라 모르는게 많을 수도), 
 
 2. spring boot version 선택 : 3.4.4(우리가 쓰는 버전)

3. language 선택(java)

4. 패키지명 : com.example.demo(자유롭게 지정 가능 / 3개정돈 사용해야 함)

5. 패키징타입: jar(java 압축 파일), war(자바 웹 압축파일)

6. java version 선택 : 부트버전에 따라 선택이 달라질 수 있음

7. 필요 라이브러리 선택  : 
  - Spring Web , dev tools, thymeleaf, lombok, spring data jpa, oracle driver, validation
    따로 추가 thymeleaf dialect


화면(front) 단 작성 : html + css + javascript + java
 1) jsp 활용 : *.jsp
  - html 코드 + java 코드 동시 작성 가능 
  - spring boot에서 사용하기 위해서는 설정 작업 필요(그래서 잘 안 사용함 / 옛날엔 거의 다 jsp)

 2) 특정 템플릿 엔진 활용 : *.html(자바 코드 사용가능한 html)
  - thymeleaf, mustache, groovy, freemaker, velocity

스프링 주요 개념
 1) IoC(Inversion of Control) : 메소드나 객체의 호출 작업을 개발자가 결정하는 것이 아니라 외부(스프링컨테이너)에서 결정(제어의 역전)
    
    class A{}
    class B{
        A obj = new A();  (x)
    }

new 안 해도 잘 돌아가는 이유
    컨테이너는 어느 객체를 생성 할 것인지 알아야 함 => 어노테이션으로 알려주기
     * 어노테이션: 컨테이너야 객체 생성해줘
     - 컨테이너가 생성한 객체 : bean  -> 컨테이너가 관리
     - 싱글톤 방식(객체는 하나만  생성)으로 객체 생성 
     - @Controller, @Service, @Component 

 2) 경로 임의로 생성
   http://localhost:8080/ ==> Controller 파일의 메소드와 매핑
   / == http://localhost:8080/

   uri 설계
   ex) 게시판 개발
   게시글 작성 : /bord/create
   게시글 목록 : /bord/list
   게시글 조회 : /bord/read
   게시글 수정 : /bord/update


@RequestMapping("/board")
public class BoardController{
   @GetMapping("/create")
   public String  method(){
    return "info";
   }

http://localhost:8080/board/create 브라우저요청 => 컨트롤러 응답(8080이후의 경로를 가진 컨트롤러) => templates 찾기(templates/return값 찾기)
=> templates / info.html 작성


   @GetMapping("/update")
   public void method(){
    
   }
    http://localhost:8080/board/update 브라우저요청 => 컨트롤러 응답(8080이후의 경로를 가진 컨트롤러) => templates 찾기(templates / 경로(/board/update )) -> mapping값에.html이 붙음
=> templates / board/update.html 작성
}


 3) 내장 서버: Tomcat(설치 후 사용 - 스프링부트를 사용한다면 내장되어 있음)

   http://localhost:8080/ : Tomcat 서버 구동 시 기본경로 

  브라우저를 통해 http, https 프로토콜에 응답하는 서버 : SW 웹서버(Apache, NginX)
  * java는 apache,NginX사용x java를 해석할 수 있는 서버여야함 => WAS(Web Application Server) : 웹서버 + 자바해석
  WAS : 웹서버 + 자바해석 => Tomcat

 4)오류 발생
  400 : 사용자 입력 오류(Bad Request)
  404: 컨트롤러 경로 확인(대소문자 구분)
  405: 컨트롤러 경로 + 매핑방식 확인(post메소드는 @PostMapping, action에 아무것도 없으면 현재 주소, a태그는 get방식)

 5) 사용자 입력값 가져오기
    (1) 변수 이용: 객체 생성시 타입 지정 가능, 변수명은 form 요소의 이름과 일치(Model사용)
    (2) 커맨드(DTO) 객체 이용: 타입 지정가능, 변수명 from 요소의 이름과 일치 
                               + 커맨드 객체 사용 시 template 페이지까지 입력값이 유지된다.
                               ex) [[${loginDTO?.userid}]] => ? : null값이 들어와도 error 안 나오게 해줌

    * cmmand 객체명: 첫문자만 소문자로 바꿔서 ex) LoginDTO -> loginDTO(LoginDTO loginDTO의 뒤 변수명 사용한거 아님)

    (3) HttpServletRequest 이용
* error나면 causedby 찾아서 검색

  6) @ModelAttribute
    - 별칭
    - model.addAttribute("num1",num1) == @ModelAttribute("num1")  : template페이지에서 값을 유지하고 싶다면

  7) RedirectAttributes: 컨트롤러에서 움직이는 방식이 redirect 일 때 사용 / 움직이면서 특정 값을 가지고 싶을 때 사용
    - rttr.addAttribute("userid", "10);  ?userid=10 => 템플랏 ${param.userid}
    - rttr.addFlashAttribute("password","12");  session 객체에 담는 것과 같은 방식 => 템플릿${password}
       *redirect -> 컨트롤내 다른주소 경로가 있어야 함(템플릿을 찾지 않을 때 이용)

  8) 데이터 유지하기
  -login.html 입력값 ==> 컨트롤러 ==> logout.html 입력값 유지를 하고싶다면?
      - forward 방식 : @ModelAttribute, Model, 커맨트 객체
      - redirect 방식 :  RedirectAttributes이용

  -login.html 입력값 ==> 컨트롤러 ==> 모든 페이지에서 입력값 유지 하고싶다면?  -> 세션 필요
      - 세션 : 값을 서버 쪽에 저장함(객체 형태로 담는 것 가능)
                HttpSession을 이용해서 저장 => 필요없는 경우 제거 or 현재 세션이 유지되고 있는 브라우저를 닫으면 종료됨
      - 쿠키 : 값을 클라이언트 브라우저로 전송 후 저장

  -login.html 입력값 ==> 컨트롤러 ==> 다른 페이지에서 입력값 소멸?
     - 컨트롤러에서 변수로 받아오는 경우 무조건 입력값 소멸


  경로 설정

  http://localhost:8080 /   -> 고정

  href 경로 설정 시 현재경로(주소줄에 있는 경로)

  현재 경로 : http://localhost:8080/sample 
  움직일 경로(도착) : http://localhost:8080/ex1  

th:href=@{ex1(id=${dto.id})} : / 안 붙이면 현재 경로에서 맨 마지막 경로를 대체 주소 설정(마지막만 바꿈)
th:href=@{/ex1(id=${dto.id})} : / 붙이면 무조건 8080 다음 부터 경로 설정
  
#temporals.format(dto.regDateTime,'yyyy-MM-dd hh:mm')  -> LocalDateTime
#dates.format(now,'yyyy-MM-dd') -> Date()


replace: 대체 ->div가 대체됨
insert:삽입 -> div안에 담김
th:block : 페이지마다 유동적인 영역(들어 올 수도 없을 수 도) 지정

데이터베이스 작업 => 프레임워크
택1)
1. MyBatis
2. JPA : 객체 == 테이블 
   - JPA 기술을 구현한 Hibernate 구현체가 존재 


 데이터베이스 초기화 전략
 spring.jpa.hibernate.ddl-auto= : 5가지 종류
  1) create : 기존 테이블 삭제 후 테이블 생성(개발시)
  2) create-drop : 기존 테이블 삭제 후 테이블 생성, 종료 시점에 테이블 삭제(개발시)
  3) update: 변경된 부분만 적용(개발시)
  4) validate: 엔티티와 테이블 정상 매핑 확인(스테이징, 운영환경)
  5) none : 사용하지 않음(스테이징, 운영환경)


Entity명이 테이블명으로 사용됨(기본)
@Table(name = "studenttbl") : Entity명이 아닌 지정된 이름으로 테이블 생성
---------------------------------------------------------------------------------------------------
오라클인 경우

    create sequence student_seq start with 1 increment by 50

    @GeneratedValue 
    @GeneratedValue(strategy = GenerationType.AUTO) 
    ----------------------------------------------------------------------------------------------
    @GeneratedValue(strategy = GenerationType.IDENTITY) 
      - id number(19,0) generated by default as identity,
  
    @SequenceGenerator(name = "student_seq_qen", sequenceName = "student_seq", allocationSize = 1)
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "student_seq_qen")
    :  create sequence student_seq start with 1 increment by 1


