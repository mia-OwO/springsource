spring security
 - 현재 프로젝트는 시큐리티 설정에 의해 움직임

  filter 를 통과해야 컨트롤러로 넘어감


  로그인 정보 없이는 모든 페이지 접근 불가
  익명사용자(AnonymousUser)
  인증사용자(Authentication User) - 로그인 후
  username: 현재페에지에서 사용하는 아이디(security 지원 개념)


- 비밀번호 암호화
   단방향 암호화 : 한번 암호화를 하면 원 비밀번호를 찾을 수 없음
    
- 메소드
    permitAll(): 권한 필요 없음
    authenticated() : 권한(로그인 성공 후 부여되는 권한) 필요함

    hasRole("USER") : user권한이 있니
    hasRole("ADMIN")  -->
    This application has no explicit mapping for /error, so you are seeing this as a fallback.
    Fri May 09 14:44:46 KST 2025
    There was an unexpected error (type=Forbidden, status=403).
    Forbidden   --> 페이지에 접근 권한이 없다는 오류(admin권한이 없기때문)


    // .httpBasic(Customizer.withDefaults());
    // .httpBasic(Customizer.withDefaults()); -> formLogin 안 할때 사용
    // Customizer.withDefaults() -> 기본으로 띄워$
    // .formLogin(Customizer.withDefaults()); // 시큐리티가 제공하는 기본 폼 페이지

- 로그인 페이지 
 id에 해당하는 요소의 이름은 반드시 username(변경 가능)
 사용자의 로그인 페이지를 사용하려면 :   .formLogin(login -> login.loginPage("/member/login").permitAll());
 & 로그인 POST 작업은 하지 않음 => 시큐리티가 처리
   => get을 제외한 모든 방법(post,put,delete)은 csrf 토큰을 요구함
   => 타임리프에서는 action에 경로 설정을 하면 csrf 토큰을 넣어줌(security 설정 + 타임리프에 경로 설정 => csrf 토큰을 넣어줌)

 로그인 성공 후 어디로 이동할 것인지 경로 지정을 하지 않으면 이전 url로 되돌아감

 로그인 처리를 위한 Service는 작성해야 함 :  UserDetailsService 구현해야함

 데이터 입력 -> controller x service로 바로 넘어감

 로그인 단 -> 생성x -> 컨트롤러x 
 security는 정해진 규칙이 있음 : UserDetailsService 상속-> 로그인단
 DTO도 User 상속, password를 DTO에 안 가져옴 -> 가져와도 되는데 password는 암호화 돼서 의미 없음
 인증이 되면 auth에 저장(?)

{
  "authorities": [
    {
      "authority": "ROLE_USER"
    }
  ],
  "details": {
    "remoteAddress": "0:0:0:0:0:0:0:1",
    "sessionId": "323F2ED46B5526804505B9031C9301FC"
  },
  "authenticated": true,
  "principal": {
    "username": "user1@gmail.com",
    "password": "{bcrypt}$2a$10$aOxkpJs9RxJ8EwK/FNCfquAESlOx1D7KQuffYSkzVmA/RbXFKFpga",
    "fromSocial": false,
    "authorities": [
      {
        "authority": "ROLE_USER"
      }
    ],
    "accountNonExpired": true,
    "accountNonLocked": true,
    "credentialsNonExpired": true,
    "enabled": true,
    "email": "user1@gmail.com",
    "name": "user1"
  },
  "credentials": null,
  "name": "user1@gmail.com"
} 요렇게 담김
  "password": "{bcrypt}$2a$10$aOxkpJs9RxJ8EwK/FNCfquAESlOx1D7KQuffYSkzVmA/RbXFKFpga", -> password를 dto에 안 담으면 null로 나옴


  <span sec:authentication="principal.authorities"> :  [ROLE_USER]

  <span sec:authentication="principal.username"> :user1@gmail.com

  sec: security 약자
  principal -> "principal": {
    "username": "user1@gmail.com",
    "password": "{bcrypt}$2a$10$aOxkpJs9RxJ8EwK/FNCfquAESlOx1D7KQuffYSkzVmA/RbXFKFpga",
    "fromSocial": false,
    "authorities": [
      {
        "authority": "ROLE_USER"
      }
    ],}


        <h3 sec:authorize="hasRple('ROLE_ADMIN')">ADMIN</h3>
    <!-- 페이지 내에서도 해당 권한(ex_ admin)만 보이게 할 수 있음 -->


    home:   <div sec:authorize="hasAnyRole({'ROLE_USER','ROLE_MANAGER','ROLE_ADMIN'})"> -> 3개중 하나
     <div sec:authorize="isAuthenticated()"> : 인증이 되었다면



    소셜계정처리
    => 테이블 저장
      email, pw

 public class CustomLoginSuccessHandler implements AuthenticationSuccessHandler  : 지정되어 있음AuthenticationSuccessHandler 상속해야됨




config 주소로 x:
- >        // http.authorizeHttpRequests(authorize -> authorize
        // .requestMatchers("/", "/sample/guest").permitAll()
        // .requestMatchers("/sample/member").hasRole("USER")
        // .requestMatchers("/sample/admin").hasRole("ADMIN")
        // .anyRequest().authenticated())

 -->        http.authorizeHttpRequests(authirize -> authirize
                .requestMatchers("/css/**", "/js/**", "/image/**").permitAll() // static있는거 다 열어
                .anyRequest().permitAll())
+

   @PreAuthorize("hasAnyRole('ADMIN')")  @PreAuthorize("hasAnyRole(permitAll)())") -> controller


- 403에러(security 적용 후)
csrf 값 확인: 자동으로 들어감 -> form에 action 값 적었는지 확인